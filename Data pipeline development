import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
import numpy as np

# Load the dataset
def load_data(file_path):
    """
    Load data from a CSV file.
    """
    return pd.read_csv(file_path)

# Data Preprocessing Pipeline
def create_preprocessing_pipeline(numeric_features, categorical_features):
    """
    Create a preprocessing pipeline for numerical and categorical features.
    """
    # Preprocessing for numerical features
    numeric_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='mean')),
        ('scaler', StandardScaler())
    ])

    # Preprocessing for categorical features
    categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('onehot', OneHotEncoder(handle_unknown='ignore'))
    ])

    # Combine preprocessors in a column transformer
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numeric_transformer, numeric_features),
            ('cat', categorical_transformer, categorical_features)
        ])

    return preprocessor

# Load, preprocess, transform, and split data
def preprocess_data(file_path):
    # Load data
    data = load_data(file_path)

    # Separate features and target (assuming target column is named 'target')
    X = data.drop('target', axis=1)
    y = data['target']

    # Identify numeric and categorical columns
    numeric_features = X.select_dtypes(include=['int64', 'float64']).columns
    categorical_features = X.select_dtypes(include=['object', 'bool']).columns

    # Create the preprocessing pipeline
    preprocessor = create_preprocessing_pipeline(numeric_features, categorical_features)

    # Apply transformations
    X_preprocessed = preprocessor.fit_transform(X)

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X_preprocessed, y, test_size=0.2, random_state=42)

    return X_train, X_test, y_train, y_test

# Main ETL Execution
def main(file_path):
    X_train, X_test, y_train, y_test = preprocess_data(file_path)
    print("Data preprocessing and transformation complete.")
    print(f"Training data shape: {X_train.shape}")
    print(f"Testing data shape: {X_test.shape}")

# Execute the pipeline if the script is run directly
if __name__ == "__main__":
    # Example file path for the dataset
    file_path = "path_to_your_dataset.csv"
    main(file_path)
